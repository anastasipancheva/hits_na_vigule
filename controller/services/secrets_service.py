from __future__ import annotations

import pyotp
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import true, false
from typing import Optional
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
import os
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
import base64

from .rsa_service import rsa_service
from ..schemas import EncryptedSecretRequest

from ..database import User
from ..schemas import (
    UserCreateRequest,
    TotpVerifyRequest,
    TotpVerifyResponse,
    UserType,
)


class CryptoService:
    """AEAD AES-GCM —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ TOTP —Å–µ–∫—Ä–µ—Ç–æ–≤ —Å –Ω–∞–¥–µ–∂–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º Master Key"""

    def __init__(self, master_key_path: str = "./secure_keys/master.key"):
        self.master_key_path = master_key_path
        os.makedirs(os.path.dirname(master_key_path), exist_ok=True, mode=0o700)
        self.master_key = self._load_or_generate_master_key()

    def _load_or_generate_master_key(self) -> bytes:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Master Key"""
        if os.path.exists(self.master_key_path):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
            with open(self.master_key_path, 'rb') as f:
                master_key = f.read()
            print("‚úÖ Master Key –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
            master_key = AESGCM.generate_key(bit_length=256)
            with open(self.master_key_path, 'wb') as f:
                f.write(master_key)
            os.chmod(self.master_key_path, 0o400)  # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
            print("‚úÖ –ù–æ–≤—ã–π Master Key —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        return master_key

    def encrypt(self, plaintext: str, associated_data: bytes | None = None) -> bytes:
        nonce = os.urandom(12)
        aesgcm = AESGCM(self.master_key)  # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        ciphertext = aesgcm.encrypt(nonce, plaintext.encode(), associated_data)
        return nonce + ciphertext

    def decrypt(self, blob: bytes, associated_data: bytes | None = None) -> str:
        nonce = blob[:12]
        ciphertext = blob[12:]
        aesgcm = AESGCM(self.master_key)  # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        plaintext = aesgcm.decrypt(nonce, ciphertext, associated_data)
        return plaintext.decode()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏
crypto_service = CryptoService(master_key_path="./secure_keys/master.key")


class SecretsService:
    """–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ TOTP —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ä–µ—Ç–∞"""

    def _calculate_secret_expiry(self, user_type: UserType) -> datetime:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = datetime.utcnow()
        
        if user_type == UserType.PERMANENT:
            # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ - 1 –≥–æ–¥
            return now + timedelta(days=365)
        elif user_type == UserType.GUEST:
            # –ì–æ—Å—Ç—å - 7 –¥–Ω–µ–π
            return now + timedelta(days=7)
        elif user_type == UserType.BUSINESS_TRIP:
            # –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ - 30 –¥–Ω–µ–π
            return now + timedelta(days=30)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 30 –¥–Ω–µ–π
            return now + timedelta(days=30)

    async def create_user(self, db: Session, request: UserCreateRequest) -> User:
        existing = db.query(User).filter((User.username == request.username) == true()).first()
        if existing:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        secret_expires_at = self._calculate_secret_expiry(request.user_type)
        
        user = User(
            username=request.username,
            user_type=request.user_type.value,
            secret_expires_at=secret_expires_at,
        )
        
        logger.info(f"üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request.username}, —Ç–∏–ø: {request.user_type.value}, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {secret_expires_at}")
        
        db.add(user)
        db.commit()
        db.refresh(user)
        return user

    async def save_user_secret(self, db: Session, username: str, secret_plain: str) -> bool:
        user = db.query(User).filter((User.username == username) == true()).first()
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        # –®–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        aad = username.encode()
        encrypted = crypto_service.encrypt(secret_plain, associated_data=aad)
        user.totp_secret = encrypted
        db.commit()
        return True

    async def revoke_access(self, db: Session, username: str) -> bool:
        user = db.query(User).filter((User.username == username) == true()).first()
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        user.totp_secret = None
        db.commit()
        return True

    async def delete_user(self, db: Session, username: str) -> bool:
        user = db.query(User).filter((User.username == username) == true()).first()
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        db.delete(user)
        db.commit()
        return True

    async def verify_totp(self, db: Session, request: TotpVerifyRequest) -> TotpVerifyResponse:

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter((User.username == request.username) == true()).first()
        if not user:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {request.username}")
            return TotpVerifyResponse(success=False, message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", access_granted=False)

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.username} (ID: {user.id})")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–∫—Ä–µ—Ç–∞
        if user.secret_expires_at and datetime.utcnow() > user.secret_expires_at:
            logger.warning(f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –∏—Å—Ç–µ–∫ –¥–ª—è {request.username}. –ò—Å—Ç–µ–∫–∞–µ—Ç: {user.secret_expires_at}")
            return TotpVerifyResponse(success=False, message="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –∏—Å—Ç–µ–∫", access_granted=False)

        if user.secret_expires_at:
            logger.info(f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–∫—Ä–µ—Ç–∞: {user.secret_expires_at} (–∞–∫—Ç–∏–≤–µ–Ω)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ä–µ—Ç–∞
        if not user.totp_secret:
            logger.warning(f"üîë –°–µ–∫—Ä–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request.username}")
            return TotpVerifyResponse(success=False, message="–°–µ–∫—Ä–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", access_granted=False)

        logger.info(f"üîë –°–µ–∫—Ä–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –ë–î (–¥–ª–∏–Ω–∞: {len(user.totp_secret)} –±–∞–π—Ç)")

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
        try:
            aad = user.username.encode()
            secret_plain = crypto_service.decrypt(user.totp_secret, associated_data=aad)
            logger.info(f"üîì –°–µ–∫—Ä–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω: {secret_plain}")
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–µ–∫—Ä–µ—Ç–∞ –¥–ª—è {request.username}: {str(e)}")
            return TotpVerifyResponse(success=False, message="–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–µ–∫—Ä–µ—Ç–∞", access_granted=False)

        # –°–æ–∑–¥–∞–Ω–∏–µ HOTP –æ–±—ä–µ–∫—Ç–∞ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        try:
            hotp = pyotp.HOTP(secret_plain)

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ Unix timestamp –∏ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            current_time_seconds = int(time.time())
            current_time_readable = datetime.utcnow()
            logger.info(f"üïê [–°–ï–†–í–ï–†] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time_readable} (Unix: {current_time_seconds})")

            # –í—ã—á–∏—Å–ª—è–µ–º counter (–æ–∫–Ω–æ TOTP)
            time_step = 30
            counter = current_time_seconds // time_step
            logger.info(
                f"üïê [–°–ï–†–í–ï–†] TOTP counter: {counter} (–æ–∫–Ω–æ: {counter * time_step} - {(counter + 1) * time_step})")

            logger.info(f"üîê –ù–∞—á–∞–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TOTP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request.username}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ counter
            expected_code = hotp.at(counter)
            logger.info(f"üî¢ –û–∂–∏–¥–∞–µ–º—ã–π HOTP –∫–æ–¥: {expected_code}, –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥: {request.totp_code}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
            is_valid = hotp.verify(request.totp_code, counter)

            if is_valid:
                logger.info(f"‚úÖ TOTP –∫–æ–¥ –≤–µ—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request.username}")
                return TotpVerifyResponse(success=True, message="–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω", access_granted=True)
            else:
                logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π TOTP –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request.username}")
                return TotpVerifyResponse(success=False, message="–ù–µ–≤–µ—Ä–Ω—ã–π TOTP –∫–æ–¥", access_granted=False)

        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TOTP –¥–ª—è {request.username}: {str(e)}")
            return TotpVerifyResponse(success=False, message="–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TOTP", access_granted=False)

    async def save_encrypted_secret(self, db: Session, request: EncryptedSecretRequest) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RSA-–∫–ª—é—á–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        user = db.query(User).filter((User.username == request.username) == true()).first()
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ Base64 –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º RSA
            encrypted_data = base64.b64decode(request.encrypted_secret)
            secret_plain = rsa_service.decrypt_with_private_key(encrypted_data)

            # –®–∏—Ñ—Ä—É–µ–º AES-GCM –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            aad = user.username.encode()
            encrypted = crypto_service.encrypt(secret_plain, associated_data=aad)

            user.totp_secret = encrypted
            if request.secret_expires_at:
                user.secret_expires_at = request.secret_expires_at

            db.commit()
            return True

        except Exception as e:
            db.rollback()
            raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞: {str(e)}")


secrets_service = SecretsService()
