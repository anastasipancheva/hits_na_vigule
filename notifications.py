import logging
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import Database

logger = logging.getLogger(__name__)


class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def notify_lesson_added(self, student_id: int, lesson_datetime: str, tutor_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞"""
        try:
            message = f"""üìÖ <b>–ù–æ–≤—ã–π —É—Ä–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!</b>

üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä:</b> {tutor_name}
üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {lesson_datetime}

üí° –£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!"""

            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="my_schedule"),
                InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É", callback_data="write_to_tutor")
            ]])

            return await send_notification_to_user(self.bot, student_id, message, reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—Ä–æ–∫–µ: {e}")
            return False

    async def notify_lesson_cancelled(self, student_id: int, lesson_datetime: str, tutor_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞"""
        try:
            message = f"""‚ùå <b>–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω</b>

üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä:</b> {tutor_name}
üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {lesson_datetime}

üí° –£—Ä–æ–∫ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞."""

            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="ÔøΩÔøΩÔøΩ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É", callback_data="write_to_tutor")
            ]])

            return await send_notification_to_user(self.bot, student_id, message, reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞: {e}")
            return False

    async def notify_lesson_rescheduled(self, student_id: int, old_datetime: str, new_datetime: str, tutor_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ —É—Ä–æ–∫–∞"""
        try:
            message = f"""üîÑ <b>–£—Ä–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω</b>

üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä:</b> {tutor_name}
üìÖ <b>–ë—ã–ª–æ:</b> {old_datetime}
üìÖ <b>–°—Ç–∞–ª–æ:</b> {new_datetime}

üí° –£—Ä–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!"""

            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="my_schedule"),
                InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É", callback_data="write_to_tutor")
            ]])

            return await send_notification_to_user(self.bot, student_id, message, reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ —É—Ä–æ–∫–∞: {e}")
            return False

    async def notify_tutor_of_student_request(self, bot: Bot, tutor_id: int, student_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ —É—á–µ–Ω–∏–∫–∞"""
        try:
            student = await Database.get_user(student_id)
            student_name = student[2] if student else f"–£—á–µ–Ω–∏–∫ {student_id}"

            message = f"""üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç —É—á–µ–Ω–∏–∫–∞!</b>

üë§ <b>–£—á–µ–Ω–∏–∫:</b> {student_name}
üÜî <b>ID:</b> {student_id}

üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."""

            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{student_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{student_id}")
            ]])

            return await send_notification_to_user(bot, tutor_id, message, reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ: {e}")
            return False

    async def send_direct_message(self, sender_id: int, recipient_id: int, content: str,
                                  message_type: str = "text", file_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender = await Database.get_user(sender_id)
            if not sender:
                logger.error(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å ID {sender_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            sender_name = sender[2] or sender[1] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            message_text = f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}:</b>\n\n{content}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            success = await send_message_to_user(self.bot, recipient_id, message_text, message_type, file_id, sender_id)

            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await Database.send_message(sender_id, recipient_id, content, message_type, file_id)
                logger.info(f"‚úÖ –ü—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç {sender_id} –∫ {recipient_id}")
                return True

            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä—è–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def send_homework_notification(self, student_id: int, homework_text: str, tutor_name: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏"""
        try:
            message = f"""üìö <b>–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>

üë®‚Äçüè´ <b>–û—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:</b> {tutor_name}

üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b>
{homework_text}

üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "üìö –ú–æ–∏ –î–ó"."""

            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìö –û—Ç–∫—Ä—ã—Ç—å –î–ó", callback_data="my_homework"),
                InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É", callback_data="write_to_tutor")
            ]])

            success = await send_notification_to_user(self.bot, student_id, message, reply_markup)

            if success:
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –î–ó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫—É {student_id}")

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –î–ó: {e}")
            return False

    async def notify_request_approved(self, bot: Bot, student_id: int, tutor_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏"""
        try:
            message = f"""‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>

üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä:</b> {tutor_name}

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –æ–±—â–µÔøΩÔøΩ–∏—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º."""

            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìÖ –ú–æ–∏ —É—Ä–æ–∫–∏", callback_data="my_schedule"),
                InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É", callback_data="write_to_tutor")
            ]])

            return await send_notification_to_user(bot, student_id, message, reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return False

    async def notify_request_rejected(self, student_id: int, tutor_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏"""
        try:
            message = f"""‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä:</b> {tutor_name}

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–∞—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.

üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∫ –¥—Ä—É–≥–∏–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""

            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üë®‚Äçüè´ –ù–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", callback_data="find_tutor")
            ]])

            return await send_notification_to_user(self.bot, student_id, message, reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return False

    async def notify_homework_assigned(self, student_id: int, homework_preview: str, tutor_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –î–ó"""
        try:
            message = f"""üìö <b>–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>

üë®‚Äçüè´ <b>–û—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:</b> {tutor_name}

üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b>
{homework_preview}

üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "üìö –ú–æ–∏ –î–ó"."""

            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìö –û—Ç–∫—Ä—ã—Ç—å –î–ó", callback_data="my_homework"),
                InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É", callback_data="write_to_tutor")
            ]])

            return await send_notification_to_user(self.bot, student_id, message, reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –î–ó: {e}")
            return False

    async def notify_message_received(self, recipient_id: int, sender_name: str, message_preview: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = f"""üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>

üë§ <b>–û—Ç:</b> {sender_name}

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message_preview}

üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è" –¥–ª—è –æ—Ç–≤–µ—Ç–∞."""

            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="open_messages"),
                InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_sender")
            ]])

            return await send_notification_to_user(self.bot, recipient_id, message, reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
            return False

    async def notify_group_lesson_created(self, student_id: int, group_name: str, lesson_datetime: str,
                                          tutor_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞"""
        try:
            message = f"""üë• <b>–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É!</b>

üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä:</b> {tutor_name}
üë• <b>–ì—Ä—É–ø–ø–∞:</b> {group_name}
üìÖ <b>–ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ:</b> {lesson_datetime}

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã.
–í—Å–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ —É—Ä–æ–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""

            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="my_schedule"),
                InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É", callback_data="write_to_tutor")
            ]])

            return await send_notification_to_user(self.bot, student_id, message, reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥—Ä—É–ø–ø–æ–≤–æ–º —É—Ä–æ–∫–µ: {e}")
            return False


notification_service = None


def init_notification_service(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_service
    notification_service = NotificationService(bot)
    return notification_service


async def send_notification_to_user(bot: Bot, user_id: int, text: str, reply_markup: InlineKeyboardMarkup = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await bot.send_message(user_id, text, reply_markup=reply_markup, parse_mode="HTML")
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False


async def send_message_to_user(bot: Bot, recipient_id: int, content: str, message_type: str = "text",
                               file_id: str = None, sender_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if message_type == "text":
            await bot.send_message(recipient_id, content, parse_mode="HTML")
        elif message_type == "voice" and file_id:
            await bot.send_voice(recipient_id, file_id, caption=content)
        elif message_type == "photo" and file_id:
            await bot.send_photo(recipient_id, file_id, caption=content)
        elif message_type == "video" and file_id:
            await bot.send_video(recipient_id, file_id, caption=content)
        elif message_type == "file" and file_id:
            await bot.send_document(recipient_id, file_id, caption=content)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
        if sender_id:
            reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_user_{sender_id}")
            ]])
            await bot.send_message(recipient_id, "üëÜ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", reply_markup=reply_markup)

        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}")
        return False
