from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
import os
import logging

logger = logging.getLogger(__name__)


class RSAService:
    def __init__(self, keys_dir: str = "./secure_keys"):
        self.keys_dir = keys_dir
        os.makedirs(keys_dir, exist_ok=True, mode=0o700)
        self.private_key_path = os.path.join(keys_dir, "controller_private.pem")
        self.public_key_path = os.path.join(keys_dir, "controller_public.pem")
        self._private_key = None
        self._public_key = None

    def generate_keys(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã RSA-–∫–ª—é—á–µ–π 4096 –±–∏—Ç –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            logger.info("üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö RSA –∫–ª—é—á–µ–π...")

            private_key = rsa.generate_private_key(
                public_exponent=65537,
                key_size=4096,
                backend=default_backend()
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ë–ï–ó –®–ò–§–†–û–í–ê–ù–ò–Ø
            with open(self.private_key_path, 'wb') as f:
                f.write(private_key.private_bytes(
                    encoding=serialization.Encoding.PEM,
                    format=serialization.PrivateFormat.TraditionalOpenSSL,  # –ë–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                    encryption_algorithm=serialization.NoEncryption()
                ))
            os.chmod(self.private_key_path, 0o400)
            logger.info("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π RSA –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è)")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
            public_key = private_key.public_key()
            with open(self.public_key_path, 'wb') as f:
                f.write(public_key.public_bytes(
                    encoding=serialization.Encoding.PEM,
                    format=serialization.PublicFormat.SubjectPublicKeyInfo
                ))
            os.chmod(self.public_key_path, 0o444)
            logger.info("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π RSA –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RSA –∫–ª—é—á–µ–π: {e}")
            raise

    def load_keys(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            if not os.path.exists(self.private_key_path) or not os.path.exists(self.public_key_path):
                logger.warning("RSA –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ...")
                self.generate_keys()
                return

            logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö RSA –∫–ª—é—á–µ–π...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (–ë–ï–ó –ü–ê–†–û–õ–Ø)
            with open(self.private_key_path, 'rb') as f:
                private_key_data = f.read()

            self._private_key = serialization.load_pem_private_key(
                private_key_data,
                password=None,  # –í–∞–∂–Ω–æ: –±–µ–∑ –ø–∞—Ä–æ–ª—è
                backend=default_backend()
            )
            logger.info("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π RSA –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
            with open(self.public_key_path, 'rb') as f:
                public_key_data = f.read()

            self._public_key = serialization.load_pem_public_key(
                public_key_data,
                backend=default_backend()
            )
            logger.info("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π RSA –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSA –∫–ª—é—á–µ–π: {e}")
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏...")
            self._regenerate_keys()

    def _regenerate_keys(self):
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –ø—Ä–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏
            for key_file in [self.private_key_path, self.public_key_path]:
                if os.path.exists(key_file):
                    os.remove(key_file)
                    logger.warning(f"–£–¥–∞–ª–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {key_file}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
            self.generate_keys()

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
            self._private_key = None
            self._public_key = None
            self.load_keys()

            logger.info("‚úÖ RSA –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RSA –∫–ª—é—á–µ–π: {e}")
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RSA –∫–ª—é—á–∏")

    def get_public_key_pem(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ PEM —Ñ–æ—Ä–º–∞—Ç–µ"""
        if not self._public_key:
            self.load_keys()

        try:
            public_key_pem = self._public_key.public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo
            ).decode('utf-8')

            logger.debug(f"–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(public_key_pem)} —Å–∏–º–≤–æ–ª–æ–≤")
            return public_key_pem

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
            raise

    def decrypt_with_private_key(self, encrypted_data: bytes) -> str:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º"""
        if not self._private_key:
            self.load_keys()

        try:
            decrypted = self._private_key.decrypt(
                encrypted_data,
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA256()),
                    algorithm=hashes.SHA256(),
                    label=None
                )
            )
            return decrypted.decode('utf-8')

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ RSA –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")

    def ensure_keys_loaded(self):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≤–∞–ª–∏–¥–Ω—ã"""
        if not self._private_key or not self._public_key:
            self.load_keys()

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
        try:
            test_data = b"test"
            encrypted = self._public_key.encrypt(
                test_data,
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA256()),
                    algorithm=hashes.SHA256(),
                    label=None
                )
            )
            decrypted = self.decrypt_with_private_key(encrypted)
            if decrypted == "test":
                logger.info("‚úÖ RSA –∫–ª—é—á–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ RSA –∫–ª—é—á–µ–π –Ω–µ –ø—Ä–æ—à–ª–∞: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
rsa_service = RSAService()