from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from database import Database
from keyboards import get_main_menu_keyboard, get_admin_homework_content_keyboard
from states import AdminStates, HomeworkStates
from constants import ROLES, has_role, get_user_role_for_menu as get_menu_role
from notifications import notification_service
import logging

logger = logging.getLogger(__name__)
router = Router()


def check_admin_rights(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(message_or_callback, *args, **kwargs):
        user_id = message_or_callback.from_user.id
        user = await Database.get_user(user_id)

        if not user:
            if hasattr(message_or_callback, 'answer'):
                await message_or_callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await message_or_callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        menu_role = get_menu_role(user_id, user[3])
        if menu_role not in [ROLES["ADMIN"], ROLES["SUPERADMIN"]]:
            if hasattr(message_or_callback, 'answer'):
                await message_or_callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            else:
                await message_or_callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        return await func(message_or_callback, *args, **kwargs)
    return wrapper


@router.message(F.text == "üìö –ó–∞–¥–∞—Ç—å –î–ó")
@check_admin_rights
async def assign_homework_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        tutor_id = message.from_user.id
        students = await Database.get_tutor_students(tutor_id)
        
        if not students:
            await message.answer(
                "üë• <b>–ó–∞–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
                "üí° –£—á–µ–Ω–∏–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫.",
                reply_markup=get_main_menu_keyboard(ROLES["ADMIN"])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
        builder = InlineKeyboardBuilder()
        
        homework_text = "üìö <b>–ó–∞–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n\nüë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:</b>\n\n"
        
        for i, student in enumerate(students[:10], 1):
            student_id, username, name, role = student
            if role == 'archived':
                continue
                
            display_name = name or username or f"–£—á–µ–Ω–∏–∫ {student_id}"
            homework_text += f"{i}. {display_name}\n"
            
            builder.add(InlineKeyboardButton(
                text=f"üë§ {display_name}",
                callback_data=f"hw_select_student_{student_id}"
            ))
        
        builder.adjust(1)
        builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="hw_cancel"))
        
        await message.answer(homework_text, reply_markup=builder.as_markup())
        await state.set_state(HomeworkStates.waiting_for_content)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ assign_homework_start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–∏–∏ –î–ó.")


@router.callback_query(F.data.startswith("hw_select_student_"))
async def select_student_for_homework(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –î–ó"""
    try:
        student_id = int(callback.data.split("_")[3])
        await state.update_data(selected_student_id=student_id)
        
        student = await Database.get_user(student_id)
        student_name = student[2] if student else f"–£—á–µ–Ω–∏–∫ {student_id}"
        
        await callback.message.edit_text(
            f"üìö <b>–ó–∞–¥–∞—Ç—å –î–ó –¥–ª—è {student_name}</b>\n\n"
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=get_admin_homework_content_keyboard()
        )
        await state.set_state(HomeworkStates.waiting_for_homework_content)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ select_student_for_homework: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("hw_type_"))
async def handle_homework_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –î–ó"""
    try:
        hw_type = callback.data.replace("hw_type_", "")
        
        if hw_type == "cancel":
            await callback.message.edit_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –î–ó –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await state.clear()
            await callback.answer()
            return
            
        await state.update_data(homework_type=hw_type)
        
        type_messages = {
            "text": "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
            "photo": "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞–Ω–∏–µ–º:",
            "file": "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º:",
            "voice": "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            "video": "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Å –∑–∞–¥–∞–Ω–∏–µ–º:"
        }
        
        message_text = type_messages.get(hw_type, "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:")
        
        await callback.message.edit_text(message_text)
        await state.set_state(HomeworkStates.waiting_for_homework_content)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_homework_type: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(HomeworkStates.waiting_for_homework_content)
async def receive_homework_content(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –î–ó"""
    try:
        data = await state.get_data()
        student_id = data.get("selected_student_id")
        hw_type = data.get("homework_type", "text")
        tutor_id = message.from_user.id
        
        if not student_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            await state.clear()
            return
            
        content_data = ""
        description = ""
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if hw_type == "text" and message.text:
            content_data = message.text
            description = message.text[:100] + "..." if len(message.text) > 100 else message.text
        elif hw_type == "photo" and message.photo:
            content_data = message.photo[-1].file_id
            description = message.caption or "–§–æ—Ç–æ –∑–∞–¥–∞–Ω–∏–µ"
        elif hw_type == "file" and message.document:
            content_data = message.document.file_id
            description = message.document.file_name or "–§–∞–π–ª –∑–∞–¥–∞–Ω–∏–µ"
        elif hw_type == "voice" and message.voice:
            content_data = message.voice.file_id
            description = "–ì–æ–ª–æ—Å–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
        elif hw_type == "video" and message.video:
            content_data = message.video.file_id
            description = message.caption or "–í–∏–¥–µ–æ –∑–∞–¥–∞–Ω–∏–µ"
        else:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –î–ó –≤ –±–∞–∑—É
        success = await Database.assign_homework(
            student_id=student_id,
            tutor_id=tutor_id,
            content_type=hw_type,
            content_data=content_data,
            description=description
        )
        
        if success:
            student = await Database.get_user(student_id)
            student_name = student[2] if student else f"–£—á–µ–Ω–∏–∫ {student_id}"
            tutor = await Database.get_user(tutor_id)
            tutor_name = tutor[2] if tutor else f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä {tutor_id}"
            
            await message.answer(
                f"‚úÖ <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω–æ!</b>\n\n"
                f"üë§ <b>–£—á–µ–Ω–∏–∫:</b> {student_name}\n"
                f"üìù <b>–¢–∏–ø:</b> {hw_type}\n"
                f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
                f"üì® –£—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏.",
                reply_markup=get_main_menu_keyboard(ROLES["ADMIN"])
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
            try:
                if notification_service:
                    await notification_service.send_homework_notification(student_id, description, tutor_name)
                else:
                    # –ü—Ä—è–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    notification_text = f"üìö <b>–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>\n\nüë®‚Äçüè´ <b>–û—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:</b> {tutor_name}\n\nüìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n{description}\n\nüí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª 'üìö –ú–æ–∏ –î–ó'."
                    
                    if hw_type == "text":
                        await message.bot.send_message(student_id, notification_text + f"\n\nüìÑ <b>–ü–æ–ª–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n{content_data}")
                    elif hw_type == "voice":
                        await message.bot.send_voice(student_id, content_data, caption=notification_text)
                    elif hw_type == "photo":
                        await message.bot.send_photo(student_id, content_data, caption=notification_text)
                    elif hw_type == "file":
                        await message.bot.send_document(student_id, content_data, caption=notification_text)
                    elif hw_type == "video":
                        await message.bot.send_video(student_id, content_data, caption=notification_text)
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É: {e}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ receive_homework_content: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –î–ó.")
        await state.clear()


@router.callback_query(F.data == "hw_cancel")
async def cancel_homework_assignment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è –î–ó"""
    try:
        await callback.message.edit_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ cancel_homework_assignment: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
@check_admin_rights
async def edit_profile_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        tutor_id = message.from_user.id
        tutor_info = await Database.get_tutor(tutor_id)
        
        if tutor_info:
            _, name, username, subjects, cost, link = tutor_info
            profile_text = f"""‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:</b>

üë§ <b>–ò–º—è:</b> {name}
üì± <b>Username:</b> @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìö <b>–ü—Ä–µ–¥–º–µ—Ç—ã:</b> {subjects}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost} —Ä—É–±/—É—Ä–æ–∫
üîó <b>–°—Å—ã–ª–∫–∞:</b> {link or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

üìù –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"""
        else:
            profile_text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞</b>\n\n‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å.\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            await state.set_state(AdminStates.waiting_for_profile_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name"),
            InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="edit_subjects")
        )
        builder.row(
            InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_cost"),
            InlineKeyboardButton(text="üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="edit_link")
        )
        builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel"))
        
        await message.answer(profile_text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ edit_profile_start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")


@router.callback_query(F.data.startswith("edit_"))
async def handle_profile_edit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        edit_type = callback.data.replace("edit_", "")
        
        if edit_type == "cancel":
            await callback.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await state.clear()
            await callback.answer()
            return
            
        edit_messages = {
            "name": ("üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:", AdminStates.waiting_for_profile_name),
            "subjects": ("üìö –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", AdminStates.waiting_for_profile_subjects),
            "cost": ("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞ –≤ —Ä—É–±–ª—è—Ö:", AdminStates.waiting_for_profile_cost),
            "link": ("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —É—Ä–æ–∫:", AdminStates.waiting_for_profile_link)
        }
        
        if edit_type in edit_messages:
            message_text, new_state = edit_messages[edit_type]
            await callback.message.edit_text(message_text)
            await state.set_state(new_state)
            await callback.answer()
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_profile_edit: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(AdminStates.waiting_for_profile_name)
async def process_profile_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏"""
    try:
        tutor_id = message.from_user.id
        new_name = message.text.strip()
        
        success = await Database.update_tutor_profile(tutor_id, name=new_name)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\nüë§ <b>–ù–æ–≤–æ–µ –∏–º—è:</b> {new_name}",
                reply_markup=get_main_menu_keyboard(ROLES["ADMIN"])
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_profile_name: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        await state.clear()


@router.message(AdminStates.waiting_for_profile_subjects)
async def process_profile_subjects(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    try:
        tutor_id = message.from_user.id
        new_subjects = message.text.strip()
        
        success = await Database.update_tutor_profile(tutor_id, subjects=new_subjects)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ü—Ä–µ–¥–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\nüìö <b>–ù–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:</b> {new_subjects}",
                reply_markup=get_main_menu_keyboard(ROLES["ADMIN"])
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_profile_subjects: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        await state.clear()


@router.message(AdminStates.waiting_for_profile_cost)
async def process_profile_cost(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        tutor_id = message.from_user.id
        
        try:
            new_cost = float(message.text.strip())
            if new_cost < 0:
                await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
            
        success = await Database.update_tutor_profile(tutor_id, cost=new_cost)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\nüí∞ <b>–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {new_cost} —Ä—É–±/—É—Ä–æ–∫",
                reply_markup=get_main_menu_keyboard(ROLES["ADMIN"])
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_profile_cost: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        await state.clear()


@router.message(AdminStates.waiting_for_profile_link)
async def process_profile_link(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏"""
    try:
        tutor_id = message.from_user.id
        new_link = message.text.strip()
        
        if new_link.lower() == "–Ω–µ—Ç":
            new_link = None
            
        success = await Database.update_tutor_profile(tutor_id, link=new_link)
        
        if success:
            link_text = new_link or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            await message.answer(
                f"‚úÖ <b>–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\nüîó <b>–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:</b> {link_text}",
                reply_markup=get_main_menu_keyboard(ROLES["ADMIN"])
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_profile_link: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        await state.clear()
