import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from database import Database
from keyboards import get_main_menu_keyboard, get_tutors_keyboard
from states import RegistrationStates
from constants import ROLES, SPECIAL_USERS, has_role, get_primary_role, SUPERADMIN_IDS
from notifications import notification_service
from datetime import datetime, timedelta
from constants import get_user_role_for_menu as get_menu_role

logger = logging.getLogger(__name__)

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await state.clear()
        user_id = message.from_user.id
        user = await Database.get_user(user_id)

        if not user and user_id in SUPERADMIN_IDS:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            success = await Database.add_user(
                user_id=user_id,
                username=message.from_user.username,
                full_name=message.from_user.full_name or "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω",
                role=ROLES["SUPERADMIN"]
            )
            if success:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
                await Database.add_tutor_with_username(
                    tutor_id=user_id,
                    name=message.from_user.full_name or "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω",
                    subjects="–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
                    cost=1000,
                    username=message.from_user.username
                )
                user = await Database.get_user(user_id)
                logger.info(f"üëë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω {user_id} —Å –ø—Ä–æ—Ñ–∏–ª–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞")

        if user:
            role = user[3]
            menu_role = get_menu_role(user_id, role)

            logger.info(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({message.from_user.full_name}) –≤–µ—Ä–Ω—É–ª—Å—è. DB —Ä–æ–ª—å: {role}, –ú–µ–Ω—é —Ä–æ–ª—å: {menu_role}")

            welcome_messages = {
                ROLES[
                    "STUDENT"]: f"üéì –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n\nüìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è!",
                ROLES["ADMIN"]: f"üë®‚Äçüè´ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n\nüîß –ü–∞–Ω–µ–ª—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞!",
                ROLES[
                    "SUPERADMIN"]: f"üëë –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n\nüõ†Ô∏è –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞!"
            }

            welcome_text = welcome_messages.get(menu_role, f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!")

            if user_id in SPECIAL_USERS:
                available_roles = ", ".join(SPECIAL_USERS[user_id]["roles"])
                welcome_text += f"\n\nüîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:</b> {available_roles}"
                welcome_text += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /admin, /superadmin, /student –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"

            await message.answer(welcome_text, reply_markup=get_main_menu_keyboard(menu_role))
        else:
            logger.info(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({message.from_user.full_name}) –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥.")
            await message.answer(
                "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è!</b>\n\n"
                "üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
                reply_markup=await get_tutors_keyboard()
            )
            await state.set_state(RegistrationStates.waiting_for_tutor_choice)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(RegistrationStates.waiting_for_tutor_choice, F.data.startswith("select_tutor_"))
async def register_student_with_tutor(callback: CallbackQuery, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º"""
    try:
        tutor_id = int(callback.data.split("_")[2])
        student_id = callback.from_user.id

        logger.info(f"üéì –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id} —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º {tutor_id}")

        existing_user = await Database.get_user(student_id)
        if existing_user:
            role = existing_user[3]
            menu_role = get_menu_role(student_id, role)
            await callback.message.edit_text(
                f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{role}</b>",
                reply_markup=get_main_menu_keyboard(menu_role)
            )
            await callback.answer()
            await state.clear()
            return

        await state.update_data(selected_tutor_id=tutor_id)
        await callback.message.edit_text(
            "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞</b>\n\n"
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
        )
        await state.set_state(RegistrationStates.waiting_for_name)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(RegistrationStates.waiting_for_name)
async def process_student_name(message: Message, state: FSMContext):
    """Process student name input"""
    try:
        student_name = message.text.strip()
        if len(student_name) < 2:
            await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return

        await state.update_data(student_name=student_name)
        await message.answer(
            "üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"
        )
        await state.set_state(RegistrationStates.waiting_for_age)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_student_name: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(RegistrationStates.waiting_for_age)
async def process_student_age(message: Message, state: FSMContext):
    """Process student age input"""
    try:
        try:
            age = int(message.text.strip())
            if age < 5 or age > 100:
                await message.answer("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 100 –ª–µ—Ç")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16)")
            return

        await state.update_data(student_age=age)
        await message.answer(
            "üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–°–ö+N (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–°–ö+3, –ú–°–ö-2):"
        )
        await state.set_state(RegistrationStates.waiting_for_timezone)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_student_age: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(RegistrationStates.waiting_for_timezone)
async def process_student_timezone(message: Message, state: FSMContext):
    """Process student timezone input"""
    try:
        timezone = message.text.strip().upper()
        if not timezone.startswith("–ú–°–ö"):
            await message.answer("‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–°–ö+N –∏–ª–∏ –ú–°–ö-N")
            return

        await state.update_data(student_timezone=timezone)
        await message.answer(
            "üìö –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å:"
        )
        await state.set_state(RegistrationStates.waiting_for_subject)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_student_timezone: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(RegistrationStates.waiting_for_subject)
async def process_student_subject(message: Message, state: FSMContext):
    """Process student subject input"""
    try:
        subject = message.text.strip()
        data = await state.get_data()

        student_id = message.from_user.id
        tutor_id = data.get('selected_tutor_id')
        student_name = data.get('student_name')
        student_age = data.get('student_age')
        timezone = data.get('student_timezone')

        # Register student with age
        success = await Database.add_user(
            user_id=student_id,
            username=message.from_user.username,
            full_name=student_name,
            role=ROLES["STUDENT"],
            tutor_id=tutor_id,
            timezone=timezone,
            subject=subject,
            age=student_age
        )

        if success:
            # Send request to tutor
            request_id = await Database.add_student_request(student_id, tutor_id)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
            if request_id:
                try:
                    tutor = await Database.get_user(tutor_id)
                    tutor_name = tutor[2] if tutor else f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä {tutor_id}"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
                    await message.bot.send_message(
                        tutor_id,
                        f"üîî <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ!</b>\n\n"
                        f"üë§ <b>–°—Ç—É–¥–µ–Ω—Ç:</b> {student_name}\n"
                        f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {student_age} –ª–µ—Ç\n"
                        f"üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n"
                        f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}\n\n"
                        f"üìã –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ó–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤' –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è."
                    )
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É {tutor_id} –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –æ—Ç {student_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É: {e}")

            await message.answer(
                f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {student_name}\n"
                f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {student_age} –ª–µ—Ç\n"
                f"üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone}\n"
                f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}\n\n"
                "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.",
                reply_markup=get_main_menu_keyboard(ROLES["STUDENT"])
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

        await state.clear()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_student_subject: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.message(Command("admin"))
async def switch_to_admin(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_id = message.from_user.id
        if user_id not in SPECIAL_USERS or "admin" not in SPECIAL_USERS[user_id]["roles"]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await state.clear()
        await message.answer(
            "üë®‚Äçüè´ <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–æ–ª—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞</b>\n\n"
            "üîß –ü–∞–Ω–µ–ª—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞!",
            reply_markup=get_main_menu_keyboard(ROLES["ADMIN"])
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ switch_to_admin: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(Command("superadmin"))
async def switch_to_superadmin(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_id = message.from_user.id
        if user_id not in SPECIAL_USERS or "superadmin" not in SPECIAL_USERS[user_id]["roles"]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await state.clear()
        await message.answer(
            "üëë <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "üõ†Ô∏è –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞!",
            reply_markup=get_main_menu_keyboard(ROLES["SUPERADMIN"])
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ switch_to_superadmin: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(Command("student"))
async def switch_to_student(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_id = message.from_user.id
        if user_id not in SPECIAL_USERS or "student" not in SPECIAL_USERS[user_id]["roles"]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞.")
            return

        await state.clear()
        await message.answer(
            "üéì <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞</b>\n\n"
            "üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è!",
            reply_markup=get_main_menu_keyboard(ROLES["STUDENT"])
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ switch_to_student: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(Command("help"))
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    try:
        await state.clear()
        user = await Database.get_user(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        role = user[3]
        menu_role = get_menu_role(message.from_user.id, role)

        help_texts = {
            ROLES["STUDENT"]: (
                "üéì <b>–ü–æ–º–æ—â—å –¥–ª—è —É—á–µ–Ω–∏–∫–∞:</b>\n\n"
                "üóìÔ∏è <b>–ú–æ–∏ —É—Ä–æ–∫–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
                "üìö <b>–ú–æ–∏ –î–ó</b> - –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
                "üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è</b> - –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º\n"
                "üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º</b> - –ø—Ä—è–º–∞—è —Å–≤—è–∑—å"
            ),
            ROLES["ADMIN"]: (
                "üë®‚Äçüè´ <b>–ü–æ–º–æ—â—å –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:</b>\n\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                "üë• <b>–ú–æ–∏ —É—á–µ–Ω–∏–∫–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞–º–∏\n"
                "üìö <b>–ó–∞–¥–∞—Ç—å –î–ó</b> - –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
                "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
                "üïê <b>–°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏\n"
                "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
            ),
            ROLES["SUPERADMIN"]: (
                "üëë <b>–ü–æ–º–æ—â—å –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
                "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</b> - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤\n"
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b> - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã\n\n"
                "üí° –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"
            )
        }

        help_text = help_texts.get(menu_role, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await message.answer(help_text, reply_markup=get_main_menu_keyboard(menu_role))

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ help_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.")


@router.message(Command("menu"))
@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –∏ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        await state.clear()
        user_id = message.from_user.id
        user = await Database.get_user(user_id)
        if user:
            db_role = user[3]
            role = get_menu_role(user_id, db_role)
        else:
            role = ROLES["STUDENT"]

        keyboard = get_main_menu_keyboard(role)
        await message.answer("üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ cmd_menu: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    try:
        current_state = await state.get_state()
        if current_state:
            await state.clear()
            user = await Database.get_user(message.from_user.id)
            if user:
                role = user[3]
                menu_role = get_menu_role(message.from_user.id, role)
            else:
                menu_role = ROLES["STUDENT"]

            await message.answer(
                "üö´ <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>",
                reply_markup=get_main_menu_keyboard(menu_role)
            )
        else:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_cancel: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.callback_query(F.data == "my_schedule")
async def handle_my_schedule_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'"""
    try:
        user_id = callback.from_user.id
        user = await Database.get_user(user_id)

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        role = user[3]
        menu_role = get_menu_role(user_id, role)

        if menu_role == ROLES["STUDENT"]:
            lessons = await Database.get_student_upcoming_lessons(user_id)

            if not lessons:
                schedule_text = (
                    "üìÖ <b>–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n\n"
                    "üí° –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π."
                )
            else:
                schedule_text = "üìÖ <b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n"

                for i, lesson in enumerate(lessons[:5], 1):
                    lesson_id, student_id, tutor_id, lesson_date, lesson_time, subject, status = lesson
                    tutor = await Database.get_user(tutor_id)
                    tutor_name = tutor[2] if tutor else f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä {tutor_id}"

                    status_emoji = {
                        'scheduled': 'üìÖ',
                        'completed': '‚úÖ',
                        'cancelled': '‚ùå'
                    }.get(status, 'üìÖ')

                    schedule_text += f"{i}. {status_emoji} {lesson_date} –≤ {lesson_time}\n"
                    schedule_text += f"   üë®‚Äçüè´ {tutor_name} - {subject or '–£—Ä–æ–∫'}\n\n"
        else:
            lessons = await Database.get_tutor_upcoming_lessons(user_id)

            if not lessons:
                schedule_text = (
                    "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>\n\n"
                    "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n\n"
                    "üí° –£—Ä–æ–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ —É—á–µ–Ω–∏–∫–æ–≤."
                )
            else:
                schedule_text = "üìä <b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n"

                for i, lesson in enumerate(lessons[:5], 1):
                    lesson_id, student_id, tutor_id, lesson_date, lesson_time, subject, status = lesson
                    student = await Database.get_user(student_id)
                    student_name = student[2] if student else f"–£—á–µ–Ω–∏–∫ {student_id}"

                    schedule_text += f"{i}. üìÖ {lesson_date} –≤ {lesson_time}\n"
                    schedule_text += f"   üë§ {student_name} - {subject or '–£—Ä–æ–∫'}\n\n"

        await callback.message.edit_text(schedule_text, reply_markup=get_main_menu_keyboard(menu_role))
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_my_schedule_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "my_homework")
async def handle_my_homework_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –î–ó'"""
    try:
        user_id = callback.from_user.id
        user = await Database.get_user(user_id)

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        homework_list = await Database.get_homework_for_student(user_id)

        if not homework_list:
            homework_text = (
                "üìö <b>–ú–æ–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–π –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."
            )
        else:
            homework_text = "üìö <b>–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"

            for i, hw in enumerate(homework_list[:5], 1):
                hw_id, student_id, tutor_id, content_type, content_data, description, assigned_at, reminder_date, reminder_time, is_completed = hw

                status = "‚úÖ" if is_completed else "‚è≥"
                short_desc = description[:40] + "..." if description and len(description) > 40 else (
                        description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

                homework_text += f"{i}. {status} {short_desc}\n"
                homework_text += f"   üìÖ –ó–∞–¥–∞–Ω–æ: {assigned_at}\n\n"

        await callback.message.edit_text(homework_text, reply_markup=get_main_menu_keyboard(ROLES["STUDENT"]))
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_my_homework_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "write_to_tutor")
async def handle_write_to_tutor_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É' - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"""
    try:
        await callback.message.edit_text(
            "üí¨ <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º</b>\n\n"
            "‚ùå –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n\n"
            "üí° –î–ª—è —Å–≤—è–∑–∏ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "‚Ä¢ Email\n"
            "‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã\n\n"
            "üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
            reply_markup=get_main_menu_keyboard(ROLES["STUDENT"])
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_write_to_tutor_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "open_messages")
async def handle_open_messages_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"""
    try:
        user_id = callback.from_user.id
        user = await Database.get_user(user_id)
        menu_role = get_menu_role(user_id, user[3]) if user else ROLES["STUDENT"]

        await callback.message.edit_text(
            "üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
            "‚ùå –§—É–Ω–∫—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n\n"
            "üí° –í—Å–µ –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —É—Ä–æ–∫–∞—Ö\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "üîß –î–ª—è –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu_keyboard(menu_role)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_open_messages_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("reply_to_user_"))
async def handle_reply_to_user_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'"""
    try:
        sender_id = int(callback.data.split("_")[3])
        sender = await Database.get_user(sender_id)
        sender_name = sender[2] if sender else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id}"

        reply_text = (
            f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\n"
            f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {sender_name}\n\n"
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )

        await callback.message.edit_text(reply_text)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_reply_to_user_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(F.text == "üìã –ó–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤")
async def handle_student_requests(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤'"""
    try:
        await state.clear()
        tutor_id = message.from_user.id
        user = await Database.get_user(tutor_id)

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        role = user[3]
        menu_role = get_menu_role(tutor_id, role)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
        if menu_role not in [ROLES["ADMIN"], ROLES["SUPERADMIN"]]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–∞–º —É—á–µ–Ω–∏–∫–æ–≤")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        requests = await Database.get_student_requests_for_tutor(tutor_id)

        if not requests:
            await message.answer(
                "üìã <b>–ó–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
                "üí° –ó–∞—è–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç—ã –≤—ã–±–µ—Ä—É—Ç –≤–∞—Å –∫–∞–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.",
                reply_markup=get_main_menu_keyboard(menu_role)
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        requests_text = "üìã <b>–ó–∞—è–≤–∫–∏ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤:</b>\n\n"

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏
        keyboard = InlineKeyboardBuilder()

        for i, request in enumerate(requests[:5], 1):
            request_id, student_id, tutor_id_req, status, created_at, student_name, student_age, timezone, subject = request

            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå'
            }.get(status, '‚è≥')

            requests_text += f"{i}. {status_emoji} <b>{student_name}</b>\n"
            requests_text += f"   üéÇ –í–æ–∑—Ä–∞—Å—Ç: {student_age} –ª–µ—Ç\n"
            requests_text += f"   üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
            requests_text += f"   üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            requests_text += f"   üìÖ –ü–æ–¥–∞–Ω–æ: {created_at}\n"

            if status == 'pending':
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
                keyboard.row(
                    InlineKeyboardButton(
                        text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å #{i}",
                        callback_data=f"approve_request_{request_id}"
                    ),
                    InlineKeyboardButton(
                        text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{i}",
                        callback_data=f"reject_request_{request_id}"
                    )
                )

            requests_text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        keyboard.row(
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                callback_data="refresh_requests"
            )
        )

        await message.answer(requests_text, reply_markup=keyboard.as_markup())

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_student_requests: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")


@router.callback_query(F.data.startswith("approve_request_"))
async def handle_approve_request(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    try:
        request_id = int(callback.data.split("_")[2])
        tutor_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        request_info = await Database.get_student_request_by_id(request_id)
        if not request_info:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        student_id = request_info[1]  # student_id –∏–∑ –∑–∞—è–≤–∫–∏

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É
        success = await Database.approve_student_request(request_id, tutor_id)

        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏
            if notification_service:
                await notification_service.notify_student_request_approved(callback.bot, student_id, tutor_id)

            await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
            await refresh_requests_list(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_approve_request: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("reject_request_"))
async def handle_reject_request(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    try:
        request_id = int(callback.data.split("_")[2])
        tutor_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        request_info = await Database.get_student_request_by_id(request_id)
        if not request_info:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        student_id = request_info[1]  # student_id –∏–∑ –∑–∞—è–≤–∫–∏

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É –ò —É–¥–∞–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        success = await Database.reject_student_request(request_id)

        if success:
            # –£–¥–∞–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
            await Database.delete_user(student_id)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            if notification_service:
                await notification_service.notify_student_request_rejected(callback.bot, student_id, tutor_id)

            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Å—Ç—É–¥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
            await refresh_requests_list(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_reject_request: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "refresh_requests")
async def handle_refresh_requests(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    try:
        await refresh_requests_list(callback)
        await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_refresh_requests: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def refresh_requests_list(callback: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    try:
        tutor_id = callback.from_user.id
        user = await Database.get_user(tutor_id)
        menu_role = get_menu_role(tutor_id, user[3])

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        requests = await Database.get_student_requests_for_tutor(tutor_id)

        if not requests:
            await callback.message.edit_text(
                "üìã <b>–ó–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
                "üí° –ó–∞—è–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç—ã –≤—ã–±–µ—Ä—É—Ç –≤–∞—Å –∫–∞–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.",
                reply_markup=get_main_menu_keyboard(menu_role)
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        requests_text = "üìã <b>–ó–∞—è–≤–∫–∏ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤:</b>\n\n"
        keyboard = InlineKeyboardBuilder()

        for i, request in enumerate(requests[:5], 1):
            request_id, student_id, tutor_id_req, status, created_at, student_name, student_age, timezone, subject = request

            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå'
            }.get(status, '‚è≥')

            requests_text += f"{i}. {status_emoji} <b>{student_name}</b>\n"
            requests_text += f"   üéÇ –í–æ–∑—Ä–∞—Å—Ç: {student_age} –ª–µ—Ç\n"
            requests_text += f"   üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
            requests_text += f"   üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            requests_text += f"   üìÖ –ü–æ–¥–∞–Ω–æ: {created_at}\n"

            if status == 'pending':
                keyboard.row(
                    InlineKeyboardButton(
                        text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å #{i}",
                        callback_data=f"approve_request_{request_id}"
                    ),
                    InlineKeyboardButton(
                        text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{i}",
                        callback_data=f"reject_request_{request_id}"
                    )
                )

            requests_text += "\n"

        keyboard.row(
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                callback_data="refresh_requests"
            )
        )

        await callback.message.edit_text(requests_text, reply_markup=keyboard.as_markup())

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ refresh_requests_list: {e}")


@router.message(F.text & ~F.text.startswith('/') & ~F.text.in_([
    "üìÖ –ú–æ–∏ —É—Ä–æ–∫–∏", "üìö –ú–æ–∏ –î–ó", "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", "üïê –°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞", "üë• –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏",
    "üìö –ó–∞–¥–∞—Ç—å –î–ó", "üìã –ó–∞—è–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤", "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–æ–π", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "üèñÔ∏è –ú–æ–∏ –æ—Ç–ø—É—Å–∫–∞", "üë• –ì—Ä—É–ø–ø–æ–≤—ã–µ —É—Ä–æ–∫–∏", "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏",
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", "üìã –°–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
    "üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω-–º–µ–Ω—é", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚ùå –û—Ç–º–µ–Ω–∞"
]))
async def handle_text_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"""
    try:
        current_state = await state.get_state()
        if current_state:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return

        user_id = message.from_user.id
        user = await Database.get_user(user_id)

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        role = user[3]
        menu_role = get_menu_role(user_id, role)

        await message.answer(
            "üí° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
            "üìù –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n"
            "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n"
            "üí¨ –î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu_keyboard(menu_role)
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query()
async def handle_callback_query(callback: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        data = callback.data
        user_id = callback.from_user.id

        if data.startswith("select_tutor_"):
            await register_student_with_tutor(callback, state)
            return

        user = await Database.get_user(user_id)

        if not user:
            if data.startswith("select_tutor_"):
                await register_student_with_tutor(callback, state)
                return
            else:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

        role = user[3]
        menu_role = get_menu_role(user_id, role)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö
        if data == "my_schedule":
            await handle_my_schedule_callback(callback)
        elif data == "my_homework":
            await handle_my_homework_callback(callback)
        elif data == "write_to_tutor":
            await handle_write_to_tutor_callback(callback)
        elif data == "open_messages":
            await handle_open_messages_callback(callback)
        elif data.startswith("reply_to_user_"):
            await handle_reply_to_user_callback(callback)
        elif data.startswith("approve_request_"):
            await handle_approve_request(callback)
        elif data.startswith("reject_request_"):
            await handle_reject_request(callback)
        elif data == "refresh_requests":
            await handle_refresh_requests(callback)
        else:
            await callback.answer("‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
