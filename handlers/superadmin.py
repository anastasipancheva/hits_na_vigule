import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from database import Database
from keyboards import (
    get_superadmin_menu_keyboard, get_tutors_for_deletion_keyboard,
    get_confirmation_keyboard, get_cancel_button, get_role_selection_keyboard
)
from states import SuperadminStates
from constants import ROLES, has_role, SUPERADMIN_IDS

logger = logging.getLogger(__name__)
router = Router()


async def check_superadmin_rights(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SUPERADMIN_IDS
    if user_id in SUPERADMIN_IDS:
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ SUPERADMIN_IDS")
        return True
    else:
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ SUPERADMIN_IDS: {SUPERADMIN_IDS}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é has_role
    if has_role(user_id, ROLES["SUPERADMIN"]):
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É has_role")
        return True
    else:
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É has_role")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        user = await Database.get_user(user_id)
        if user:
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –ë–î —Å —Ä–æ–ª—å—é: {user[3]}")
            if user[3] == ROLES["SUPERADMIN"]:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç —Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –≤ –ë–î")
                return True
        else:
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î: {e}")

    logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –∏–º–µ–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞")
    return False


def check_superadmin_rights_decorator(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ - –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""

    async def wrapper(message_or_callback, *args, **kwargs):
        user_id = message_or_callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        if not await check_superadmin_rights(user_id):
            if hasattr(message_or_callback, 'answer'):
                await message_or_callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
            else:
                await message_or_callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
            return

        return await func(message_or_callback, *args, **kwargs)

    return wrapper


@router.message(F.text == "/check_rights")
async def debug_check_rights(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤"""
    user_id = message.from_user.id
    has_rights = await check_superadmin_rights(user_id)

    debug_info = f"""üîç <b>–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:</b>

üìã <b>–ü—Ä–æ–≤–µ—Ä–∫–∏:</b>
‚Ä¢ –í SUPERADMIN_IDS: {'‚úÖ' if user_id in SUPERADMIN_IDS else '‚ùå'}
‚Ä¢ has_role(): {'‚úÖ' if has_role(user_id, ROLES['SUPERADMIN']) else '‚ùå'}
‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ï–°–¢–¨ –ü–†–ê–í–ê' if has_rights else '‚ùå –ù–ï–¢ –ü–†–ê–í'}

üìä <b>–î–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ SUPERADMIN_IDS: {SUPERADMIN_IDS}
‚Ä¢ –í–∞—à ID: {user_id}"""

    try:
        user = await Database.get_user(user_id)
        if user:
            debug_info += f"\n‚Ä¢ –†–æ–ª—å –≤ –ë–î: {user[3]}"
        else:
            debug_info += f"\n‚Ä¢ –í –ë–î: –ù–ï –ù–ê–ô–î–ï–ù"
    except Exception as e:
        debug_info += f"\n‚Ä¢ –û—à–∏–±–∫–∞ –ë–î: {e}"

    await message.answer(debug_info)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
@router.message(F.text == "üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω-–º–µ–Ω—é")
async def superadmin_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    try:
        user_id = message.from_user.id
        logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω-–º–µ–Ω—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        user = await Database.get_user(user_id)
        if not user:
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞")
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        if not await check_superadmin_rights(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –∏–º–µ–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
            return

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω-–º–µ–Ω—é")
        await message.answer(
            "üëë <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞!</b>\n\n"
            "üõ†Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:</b>\n"
            "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤\n"
            "‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
            "‚Ä¢ üìã –°–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤\n"
            "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ –≤—Å—é —Å–∏—Å—Ç–µ–º—É.\n"
            "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
            "üïê <b>–í—Å–µ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–æ—Å–∫–≤–µ (–ú–°–ö)</b>",
            reply_markup=get_superadmin_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ superadmin_menu: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é.")


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏
@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏")
async def role_management_menu(message: Message, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    try:
        if not await check_superadmin_rights(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
            return

        await state.clear()

        role_text = """üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.

üìù –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:"""

        await message.answer(role_text, reply_markup=get_cancel_button())
        await state.set_state(SuperadminStates.waiting_for_role_user_id)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ role_management_menu: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏.")


@router.message(SuperadminStates.waiting_for_role_user_id)
async def process_role_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_superadmin_menu_keyboard())
            return

        try:
            user_id = int(message.text)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")
            return

        user = await Database.get_user(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await state.update_data(target_user_id=user_id)

        current_role = user[3]
        username = user[1] or "–ë–µ–∑ username"
        name = user[2] or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        await message.answer(
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:</b>\n"
            f"üì± Username: @{username}\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üîß –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {current_role}\n\n"
            f"üìù –í—ã–±–µÔøΩÔøΩ–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:",
            reply_markup=get_role_selection_keyboard()
        )
        await state.set_state(SuperadminStates.waiting_for_new_role)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_role_user_id: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID.")


@router.callback_query(SuperadminStates.waiting_for_new_role, F.data.startswith("role_"))
async def process_new_role(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏"""
    try:
        new_role = callback.data.split("_")[1]
        data = await state.get_data()
        target_user_id = data['target_user_id']

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await Database.get_user(target_user_id)
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
        success = await Database.update_user_role(target_user_id, new_role)

        if success:
            await callback.message.edit_text(
                f"‚úÖ <b>–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user[2]}\n"
                f"üîß <b>–ù–æ–≤–∞—è —Ä–æ–ª—å:</b> {new_role}\n\n"
                f"üéâ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
            )
        else:
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.")

        await state.clear()
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_new_role: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.")
        await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞")
async def delete_tutor_menu(message: Message, state: FSMContext):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    try:
        if not await check_superadmin_rights(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
            return

        await state.clear()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
        tutors = await Database.get_all_tutors()
        if not tutors:
            await message.answer(
                "üì≠ <b>–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.</b>",
                reply_markup=get_superadmin_menu_keyboard()
            )
            return

        delete_text = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞</b>\n\n"
        delete_text += f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã ({len(tutors)}):</b>\n\n"

        for tutor in tutors:
            tutor_id, name, username, subjects, cost, link = tutor
            delete_text += f"üë®‚Äçüè´ <b>{name}</b>\n"
            delete_text += f"üÜî ID: {tutor_id}\n"
            delete_text += f"üì± @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            delete_text += f"üìö {subjects or '–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n"

        delete_text += "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

        await message.answer(
            delete_text,
            reply_markup=await get_tutors_for_deletion_keyboard(tutors)
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ delete_tutor_menu: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤.")


@router.callback_query(F.data.startswith("delete_tutor_"))
async def confirm_delete_tutor(callback: CallbackQuery, state: FSMContext):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ callback_data
        parts = callback.data.split("_")
        if len(parts) >= 3:
            tutor_id = int(parts[2])
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.")
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        tutor = await Database.get_tutor(tutor_id)
        if not tutor:
            await callback.message.edit_text("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        tutor_name = tutor[1]

        await callback.message.edit_text(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞</b>\n\n"
            f"üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä:</b> {tutor_name}\n"
            f"üÜî <b>ID:</b> {tutor_id}\n\n"
            f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
            f"‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞?</b>",
            reply_markup=get_confirmation_keyboard("delete_tutor", tutor_id)
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ confirm_delete_tutor: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        await callback.answer()


@router.callback_query(F.data.startswith("delete_tutor_yes_"))
async def execute_delete_tutor(callback: CallbackQuery, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    try:
        tutor_id = int(callback.data.split("_")[3])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        tutor = await Database.get_tutor(tutor_id)
        tutor_name = tutor[1] if tutor else f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä {tutor_id}"

        # –£–¥–∞–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        success = await Database.delete_tutor_info(tutor_id)

        if success:
            await callback.message.edit_text(
                f"‚úÖ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä:</b> {tutor_name}\n\n"
                f"üóëÔ∏è –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
            )
        else:
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")

        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ execute_delete_tutor: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
        await callback.answer()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
async def system_settings_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if not await check_superadmin_rights(message.from_user.id):
            return

        settings_text = """‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

üîß <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± —É—Ä–æ–∫–∞—Ö: –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞
‚Ä¢ üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –î–ó: –æ—Ç–∫–ª—é—á–µ–Ω—ã (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
‚Ä¢ üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω—ã
‚Ä¢ ‚è∞ –í—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞: –∑–∞ 24 —á–∞—Å–∞
‚Ä¢ üí∞ –í–∞–ª—é—Ç–∞ —Å–∏—Å—Ç–µ–º—ã: —Ä—É–±–ª–∏ (‚ÇΩ)

üìä <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite
‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã
‚Ä¢ üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤: –≤–∫–ª—é—á–µ–Ω–∞
‚Ä¢ üé• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ: –≤–∫–ª—é—á–µ–Ω–∞

‚úÖ <b>–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã</b>

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""

        await message.answer(settings_text, reply_markup=get_superadmin_menu_keyboard())

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ system_settings_menu: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã.")


# –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞")
async def add_tutor_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    try:
        if not await check_superadmin_rights(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
            return

        await message.answer(
            "üë®‚Äçüè´ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º:\n\n"
            "üí° <i>ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–µ—Ä–µ–∑ @userinfobot</i>",
            reply_markup=get_cancel_button()
        )
        await state.set_state(SuperadminStates.waiting_for_tutor_id)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ add_tutor_start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(SuperadminStates.waiting_for_tutor_id)
async def process_tutor_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_superadmin_menu_keyboard()
            )
            return

        try:
            tutor_id = int(message.text)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")
            return

        user = await Database.get_user(tutor_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        if user[3] == ROLES["ADMIN"]:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º.")
            return

        await state.update_data(tutor_id=tutor_id)
        username = user[1] or "–ë–µ–∑ username"
        name = user[2] or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        await message.answer(
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:</b>\n"
            f"üì± Username: @{username}\n"
            f"üë§ –ò–º—è: {name}\n\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã:",
            reply_markup=get_cancel_button()
        )
        await state.set_state(SuperadminStates.waiting_for_tutor_name)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_tutor_id: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID.")


@router.message(SuperadminStates.waiting_for_tutor_name)
async def process_tutor_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_superadmin_menu_keyboard()
            )
            return

        await state.update_data(tutor_name=message.text)
        await message.answer(
            "üì± <b>Username —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ username —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –≤ Telegram (–±–µ–∑ @) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç:\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: ivan_tutor</i>",
            reply_markup=get_cancel_button()
        )
        await state.set_state(SuperadminStates.waiting_for_tutor_username)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_tutor_name: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(SuperadminStates.waiting_for_tutor_username)
async def process_tutor_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ username —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_superadmin_menu_keyboard()
            )
            return

        username = None if message.text.lower() == "–Ω–µ—Ç" else message.text.replace("@", "")
        await state.update_data(tutor_username=username)

        await message.answer(
            "üìö <b>–ü—Ä–µ–¥–º–µ—Ç—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–ø–æ–¥–∞–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –§–∏–∑–∏–∫–∞, –•–∏–º–∏—è</i>",
            reply_markup=get_cancel_button()
        )
        await state.set_state(SuperadminStates.waiting_for_tutor_subjects)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_tutor_username: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(SuperadminStates.waiting_for_tutor_subjects)
async def process_tutor_subjects(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_superadmin_menu_keyboard()
            )
            return

        await state.update_data(tutor_subjects=message.text)
        await message.answer(
            "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞ –≤ —Ä—É–±–ª—è—Ö:\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: 1500</i>",
            reply_markup=get_cancel_button()
        )
        await state.set_state(SuperadminStates.waiting_for_tutor_cost)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_tutor_subjects: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(SuperadminStates.waiting_for_tutor_cost)
async def process_tutor_cost(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ä–æ–∫–∞"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_superadmin_menu_keyboard()
            )
            return

        try:
            cost = float(message.text)
            if cost < 0:
                await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return

        await state.update_data(tutor_cost=cost)
        await message.answer(
            "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —É—Ä–æ–∫ (Zoom, Meet –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç:\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: https://zoom.us/j/123456789</i>",
            reply_markup=get_cancel_button()
        )
        await state.set_state(SuperadminStates.waiting_for_tutor_link)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_tutor_cost: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(SuperadminStates.waiting_for_tutor_link)
async def process_tutor_link(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Ä–æ–∫"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_superadmin_menu_keyboard()
            )
            return

        link = None if message.text.lower() == "–Ω–µ—Ç" else message.text
        data = await state.get_data()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await Database.update_user_role(data["tutor_id"], ROLES["ADMIN"])

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        await Database.add_tutor_with_username(
            data["tutor_id"],
            data["tutor_name"],
            data["tutor_subjects"],
            data["tutor_cost"],
            link,
            data.get("tutor_username")
        )

        await message.answer(
            f"‚úÖ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë®‚Äçüè´ <b>–ò–º—è:</b> {data['tutor_name']}\n"
            f"üì± <b>Username:</b> @{data.get('tutor_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç—ã:</b> {data['tutor_subjects']}\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {data['tutor_cost']} —Ä—É–±/—É—Ä–æ–∫\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"üéâ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
            reply_markup=get_superadmin_menu_keyboard()
        )
        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_tutor_link: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤")
async def tutors_list(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤"""
    try:
        if not await check_superadmin_rights(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
            return

        tutors = await Database.get_all_tutors()
        if not tutors:
            await message.answer(
                "üì≠ <b>–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤.</b>",
                reply_markup=get_superadmin_menu_keyboard()
            )
            return

        tutors_text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤:</b>\n\n"

        for tutor in tutors:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            tutor_id, name, username, subjects, cost, link = tutor

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await Database.get_user(tutor_id)
            user_username = user_info[1] if user_info else "–ù–µ—Ç username"

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤
            students = await Database.get_tutor_students(tutor_id)
            students_count = len([s for s in students if s[3] != 'archived'])

            tutors_text += f"üë®‚Äçüè´ <b>{name}</b>\n"
            tutors_text += f"üÜî ID: {tutor_id}\n"
            tutors_text += f"üì± @{username or user_username}\n"
            tutors_text += f"üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {subjects}\n"
            tutors_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} —Ä—É–±/—É—Ä–æ–∫\n"
            tutors_text += f"üë• –£—á–µ–Ω–∏–∫–æ–≤: {students_count}\n"

            if link:
                tutors_text += f"üîó –°—Å—ã–ª–∫–∞: {link}\n"

            tutors_text += "\n" + "‚îÄ" * 30 + "\n\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(tutors_text) > 4000:
            parts = [tutors_text[i:i + 4000] for i in range(0, len(tutors_text), 4000)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
                    await message.answer(part, reply_markup=get_superadmin_menu_keyboard())
                else:
                    await message.answer(part)
        else:
            await message.answer(tutors_text, reply_markup=get_superadmin_menu_keyboard())

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ tutors_list: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤.")


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
async def system_statistics(message: Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if not await check_superadmin_rights(message.from_user.id):
            return

        stats = await Database.get_system_statistics()

        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚Ä¢ üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤: {stats.get('tutors', 0)}
‚Ä¢ üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {stats.get('students', 0)}
‚Ä¢ üîß –°—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤: {stats.get('superadmins', 0)}
‚Ä¢ üìÅ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('archived', 0)}

üìö <b>–û–±—É—á–µ–Ω–∏–µ:</b>
‚Ä¢ –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {stats.get('total_lessons', 0)}
‚Ä¢ ‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö: {stats.get('completed_lessons', 0)}
‚Ä¢ üìù –ó–∞–¥–∞–Ω–∏–π –≤—ã–¥–∞–Ω–æ: {stats.get('homework_assigned', 0)}
‚Ä¢ üì§ –ó–∞–¥–∞–Ω–∏–π —Å–¥–∞–Ω–æ: {stats.get('homework_submitted', 0)}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ üí≥ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: {stats.get('paid_lessons', 0)}
‚Ä¢ üíµ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {stats.get('total_revenue', 0)} —Ä—É–±.

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ üì® –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('total_messages', 0)}
‚Ä¢ üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {stats.get('pending_requests', 0)}

üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {stats.get('updated_at', '–°–µ–π—á–∞—Å')}"""

        await message.answer(stats_text, reply_markup=get_superadmin_menu_keyboard())

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ system_statistics: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


# –ü–û–ú–û–©–¨
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_superadmin(message: Message):
    """–ü–æ–º–æ—â—å –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    try:
        if not await check_superadmin_rights(message.from_user.id):
            return

        help_text = """üëë <b>–ü–æ–º–æ—â—å –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üõ†Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:</b>
‚Ä¢ ‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞</b> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
‚Ä¢ üóëÔ∏è <b>–£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞</b> - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</b> - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b> - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
‚Ä¢ ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b> - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ –≤—Å—é —Å–∏—Å—Ç–µ–º—É.
–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:</b>
‚Ä¢ üë®‚Äçüéì –£—á–µ–Ω–∏–∫ - –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫–∏
‚Ä¢ üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä - –º–æ–∂–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —É—Ä–æ–∫–∏
‚Ä¢ üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

‚è∞ <b>–í—Å–µ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö)</b>"""

        await message.answer(help_text, reply_markup=get_superadmin_menu_keyboard())

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ help_superadmin: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback'–æ–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
# @router.callback_query()
# async def handle_superadmin_callback(callback: CallbackQuery):
#     """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
#     try:
#         callback_data = callback.data
#         user_id = callback.from_user.id
#
#         user = await Database.get_user(user_id)
#         if not user:
#             await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ")
#             return
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
#         if not await check_superadmin_rights(user_id):
#             await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
#             return
#
#         # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ
#         if callback_data.startswith("delete_tutor_"):
#             await confirm_delete_tutor(callback, None)
#         elif callback_data.startswith("delete_tutor_yes_"):
#             await execute_delete_tutor(callback, None)
#         elif callback_data.startswith("role_"):
#             # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–æ–ª–∏
#             from aiogram.fsm.context import FSMContext
#             state = FSMContext()
#             await process_new_role(callback, state)
#         else:
#             await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
#
#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_superadmin_callback: {e}")
#         await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
