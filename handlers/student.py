import logging
from functools import wraps
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import Database
from keyboards import get_main_menu_keyboard, get_student_homework_content_keyboard
from states import StudentStates, StudentHomeworkStates
from constants import ROLES, get_user_role_for_menu as get_menu_role

logger = logging.getLogger(__name__)

router = Router()


def check_student_rights(func):
    @wraps(func)
    async def wrapper(message_or_callback, *args, **kwargs):
        user_id = message_or_callback.from_user.id
        user = await Database.get_user(user_id)

        # Allow access for unregistered users during registration process
        if not user:
            return await func(message_or_callback, *args, **kwargs)

        # Allow access for students and unregistered users
        if user[3] not in [ROLES["STUDENT"], ROLES["UNREGISTERED"]]:
            if hasattr(message_or_callback, 'answer'):
                await message_or_callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É—á–µ–Ω–∏–∫–∞.")
            else:
                await message_or_callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É—á–µ–Ω–∏–∫–∞.")
            return

        return await func(message_or_callback, *args, **kwargs)

    return wrapper


@router.message(F.text == "üìö –ú–æ–∏ –î–ó")
@check_student_rights
async def show_my_homework(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        student_id = message.from_user.id
        homework_list = await Database.get_homework_for_student(student_id)

        if not homework_list:
            await message.answer(
                "üìö <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.</b>\n\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–π –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.",
                reply_markup=get_main_menu_keyboard(ROLES["STUDENT"])
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –î–ó
        homework_text = "üìö <b>–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"

        builder = InlineKeyboardBuilder()

        for i, hw in enumerate(homework_list[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            hw_id, student_id, tutor_id, content_type, content_data, description, assigned_at, reminder_date, reminder_time, is_completed = hw

            status = "‚úÖ" if is_completed else "‚è≥"
            short_desc = description[:50] + "..." if description and len(description) > 50 else (
                    description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

            homework_text += f"{i}. {status} {short_desc}\n"

            builder.add(InlineKeyboardButton(
                text=f"{status} –î–ó #{i}",
                callback_data=f"hw_view_{hw_id}"
            ))

        builder.adjust(2)

        await message.answer(
            homework_text + "\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_my_homework: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")


@router.callback_query(F.data.startswith("hw_view_"))
async def view_homework_details(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        hw_id = int(callback.data.split("_")[2])

        homework = await Database.get_homework_by_id(hw_id)
        if not homework:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        hw_id, student_id, tutor_id, content_type, content_data, description, assigned_at, reminder_date, reminder_time, is_completed = homework

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        tutor = await Database.get_user(tutor_id)
        tutor_name = tutor[2] if tutor else f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä {tutor_id}"

        status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_completed else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"

        hw_text = (
            f"üìö <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ #{hw_id}</b>\n\n"
            f"üë®‚Äçüè´ <b>–û—Ç:</b> {tutor_name}\n"
            f"üìÖ <b>–ó–∞–¥–∞–Ω–æ:</b> {assigned_at}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        builder = InlineKeyboardBuilder()

        if not is_completed:
            builder.add(InlineKeyboardButton(
                text="üì§ –°–¥–∞—Ç—å –î–ó",
                callback_data=f"submit_hw_{hw_id}"
            ))

        builder.add(InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É –î–ó",
            callback_data="back_to_homework_list"
        ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏—è
        if content_type == "text":
            await callback.message.edit_text(
                hw_text + f"\nüìÑ <b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n{content_data}",
                reply_markup=builder.as_markup()
            )
        else:
            await callback.message.edit_text(hw_text, reply_markup=builder.as_markup())

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç
            try:
                if content_type == "voice":
                    await callback.message.answer_voice(content_data)
                elif content_type == "photo":
                    await callback.message.answer_photo(content_data)
                elif content_type == "file":
                    await callback.message.answer_document(content_data)
                elif content_type == "video":
                    await callback.message.answer_video(content_data)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")

        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ view_homework_details: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("submit_hw_"))
async def start_homework_submission(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        hw_id = int(callback.data.split("_")[2])

        await state.update_data(submitting_hw_id=hw_id)

        await callback.message.edit_text(
            "üì§ <b>–°–¥–∞—á–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=get_student_homework_content_keyboard(include_cancel=True)
        )
        await state.set_state(StudentHomeworkStates.waiting_for_submission_type)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_homework_submission: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("submit_"))
async def handle_submission_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–∞—á–∏ –î–ó"""
    try:
        submission_type = callback.data.replace("submit_", "")

        if submission_type == "cancel":
            await callback.message.edit_text("‚ùå –°–¥–∞—á–∞ –î–ó –æ—Ç–º–µ–Ω–µ–Ω–∞")
            await state.clear()
            await callback.answer()
            return

        await state.update_data(submission_type=submission_type)

        type_messages = {
            "text": "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º:",
            "photo": "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–µ—à–µ–Ω–∏–µ–º:",
            "file": "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ—à–µ–Ω–∏–µ–º:",
            "voice": "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            "video": "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Å —Ä–µ—à–µ–Ω–∏–µ–º:"
        }

        message_text = type_messages.get(submission_type, "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")

        await callback.message.edit_text(message_text, reply_markup=None)
        await state.set_state(StudentHomeworkStates.waiting_for_submission_content)
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_submission_type: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(StudentHomeworkStates.waiting_for_submission_content)
async def receive_homework_submission(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        data = await state.get_data()
        hw_id = data.get("submitting_hw_id")
        submission_type = data.get("submission_type", "text")
        student_id = message.from_user.id

        if not hw_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –î–ó
        homework = await Database.get_homework_by_id(hw_id)
        if not homework:
            await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return

        tutor_id = homework[2]

        content_data = ""
        description = ""

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if submission_type == "text" and message.text:
            content_data = message.text
            description = message.text[:100] + "..." if len(message.text) > 100 else message.text
        elif submission_type == "photo" and message.photo:
            content_data = message.photo[-1].file_id
            description = message.caption or "–§–æ—Ç–æ —Ä–µ—à–µ–Ω–∏–µ"
        elif submission_type == "file" and message.document:
            content_data = message.document.file_id
            description = message.document.file_name or "–§–∞–π–ª —Ä–µ—à–µ–Ω–∏–µ"
        elif submission_type == "voice" and message.voice:
            content_data = message.voice.file_id
            description = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ"
        elif submission_type == "video" and message.video:
            content_data = message.video.file_id
            description = message.caption or "–í–∏–¥–µ–æ —Ä–µ—à–µ–Ω–∏–µ"
        else:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–∞—á—É –î–ó
        success = await Database.submit_homework(
            student_id=student_id,
            tutor_id=tutor_id,
            content_type=submission_type,
            content_data=content_data,
            description=description
        )

        if success:
            await message.answer(
                "‚úÖ <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω–æ!</b>\n\n"
                "üì® –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –æ—Ç–≤–µ—Ç–µ.",
                reply_markup=get_main_menu_keyboard(ROLES["STUDENT"])
            )

            try:
                student = await Database.get_user(student_id)
                student_name = student[2] if student else f"–£—á–µ–Ω–∏–∫ {student_id}"

                notification_text = f"üì§ <b>–ù–æ–≤–∞—è —Å–¥–∞—á–∞ –î–ó!</b>\n\nüë§ <b>–û—Ç:</b> {student_name}\nüìù <b>–¢–∏–ø:</b> {submission_type}\nüìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}"

                if submission_type == "text":
                    await message.bot.send_message(tutor_id, notification_text + f"\n\nüìÑ <b>–û—Ç–≤–µ—Ç:</b>\n{content_data}")
                elif submission_type == "voice":
                    await message.bot.send_voice(tutor_id, content_data, caption=notification_text)
                elif submission_type == "photo":
                    await message.bot.send_photo(tutor_id, content_data, caption=notification_text)
                elif submission_type == "file":
                    await message.bot.send_document(tutor_id, content_data, caption=notification_text)
                elif submission_type == "video":
                    await message.bot.send_video(tutor_id, content_data, caption=notification_text)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É: {e}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–¥–∞—á–∏ –î–ó.")

        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ receive_homework_submission: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–∞—á–∏ –î–ó.")
        await state.clear()


@router.callback_query(F.data == "back_to_homework_list")
async def back_to_homework_list(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –î–ó"""
    try:
        student_id = callback.from_user.id
        homework_list = await Database.get_homework_for_student(student_id)

        if not homework_list:
            await callback.message.edit_text("üìö <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.</b>")
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –î–ó
        homework_text = "üìö <b>–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"

        builder = InlineKeyboardBuilder()

        for i, hw in enumerate(homework_list[:10], 1):
            hw_id, student_id, tutor_id, content_type, content_data, description, assigned_at, reminder_date, reminder_time, is_completed = hw

            status = "‚úÖ" if is_completed else "‚è≥"
            short_desc = description[:50] + "..." if description and len(description) > 50 else (
                    description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

            homework_text += f"{i}. {status} {short_desc}\n"

            builder.add(InlineKeyboardButton(
                text=f"{status} –î–ó #{i}",
                callback_data=f"hw_view_{hw_id}"
            ))

        builder.adjust(2)

        await callback.message.edit_text(
            homework_text + "\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_homework_list: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
@router.message(F.text == "üìÖ –ú–æ–∏ —É—Ä–æ–∫–∏")
@check_student_rights
async def show_my_lessons(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    try:
        student_id = message.from_user.id
        lessons = await Database.get_student_upcoming_lessons(student_id)

        if not lessons:
            await message.answer(
                "üìÖ <b>–ú–æ–∏ —É—Ä–æ–∫–∏</b>\n\n"
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n\n"
                "üí° –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π.",
                reply_markup=get_main_menu_keyboard(ROLES["STUDENT"])
            )
            return

        lessons_text = "üìÖ <b>–í–∞—à–∏ —É—Ä–æ–∫–∏:</b>\n\n"

        for i, lesson in enumerate(lessons[:10], 1):
            lesson_id, student_id, tutor_id, lesson_date, lesson_time, subject, status = lesson
            tutor = await Database.get_user(tutor_id)
            tutor_name = tutor[2] if tutor else f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä {tutor_id}"

            status_emoji = {
                'scheduled': 'üìÖ',
                'completed': '‚úÖ',
                'cancelled': '‚ùå',
                'rescheduled': 'üîÑ'
            }.get(status, 'üìÖ')

            lessons_text += f"{i}. {status_emoji} {lesson_date} –≤ {lesson_time}\n"
            lessons_text += f"   üë®‚Äçüè´ {tutor_name}\n"
            lessons_text += f"   üìö {subject or '–£—Ä–æ–∫'}\n"
            lessons_text += f"   üìä {status}\n\n"

        await message.answer(lessons_text, reply_markup=get_main_menu_keyboard(ROLES["STUDENT"]))

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_my_lessons: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–æ–≤.")


@router.message(F.text == "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è")
@check_student_rights
async def student_messages(message: Message, state: FSMContext):
    """–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞"""
    try:
        student_id = message.from_user.id
        messages = await Database.get_messages_for_user(student_id)

        if not messages:
            await message.answer(
                "üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
                "üí° –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.\n\n"
                "üìù –ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                reply_markup=get_main_menu_keyboard(ROLES["STUDENT"])
            )
            return

        messages_text = "üí¨ <b>–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"

        for i, msg in enumerate(messages[:5], 1):
            msg_id, sender_id, recipient_id, content, sent_at, is_read = msg
            sender = await Database.get_user(sender_id)
            sender_name = sender[2] if sender else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id}"

            status = "üìñ" if is_read else "üì©"
            short_content = content[:50] + "..." if len(content) > 50 else content

            messages_text += f"{i}. {status} –û—Ç {sender_name}\n"
            messages_text += f"   üìù {short_content}\n"
            messages_text += f"   üìÖ {sent_at}\n\n"

        messages_text += "üìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

        await message.answer(messages_text, reply_markup=get_main_menu_keyboard(ROLES["STUDENT"]))

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ student_messages: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")


@router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º")
@check_student_rights
async def contact_tutor(message: Message):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º"""
    try:
        student_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞
        tutor = await Database.get_student_tutor(student_id)

        if not tutor:
            await message.answer(
                "üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º</b>\n\n"
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.\n\n"
                "üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.",
                reply_markup=get_main_menu_keyboard(ROLES["STUDENT"])
            )
            return

        tutor_id, tutor_username, tutor_name, tutor_role = tutor
        tutor_display_name = tutor_name or tutor_username or f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä {tutor_id}"

        contact_text = (
            "üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º</b>\n\n"
            f"üë®‚Äçüè´ <b>–í–∞—à —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä:</b> {tutor_display_name}\n\n"
            "üí¨ <b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
            "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏\n"
            "‚Ä¢ –û–±—Å—É–¥–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤\n\n"
            "üí° –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–æ–±—â–µ–Ω–∏—è'."
        )

        await message.answer(contact_text, reply_markup=get_main_menu_keyboard(ROLES["STUDENT"]))

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ contact_tutor: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ.")


# @router.callback_query()
# async def handle_student_callback(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback'–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
#     try:
#         callback_data = callback.data
#
#         # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback'–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
#         if callback_data.startswith("hw_view_"):
#             await view_homework_details(callback)
#         elif callback_data.startswith("submit_hw_"):
#             await start_homework_submission(callback, state)
#         elif callback_data.startswith("submit_"):
#             await handle_submission_type(callback, state)
#         elif callback_data == "back_to_homework_list":
#             await back_to_homework_list(callback)
#         else:
#             await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
#
#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_student_callback: {e}")
#         await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
